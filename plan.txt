Instructions:
	0 :" " : ADD {reg}, {reg}    | Adds value of register to register
	1 :"!" : SUB {reg}, {reg}    | Subtracts value of register from register
	2 :""" : TEST {reg}          | Checks if register is 0
	3 :"#" : JNZ {rel8}          | Jumps to relative address if register is not 0
	4 :"$" : LOAD {reg}, {rel8}  | Loads relative address value into register
	5 :"%" : STORE {rel8}, {reg} | Stores register value into relative address
	6 :"&" : INC {reg}           | Increments register
	7 :"'" : DEC {reg}           | Decrements register
	8 :"(" : PRINT {reg}         | Prints lower byte of register as ASCII
	9 :")" : READ {reg}          | Reads ASCII into register
	10:"*" : JMP {rel8}          | Jumps to relative address
	11:"+" : COPY {reg}, {reg}   | Copys value of register into register
	12:"," : ZERO {reg}          | Sets value of register to 0
	13:"-" : ANDLB {reg}         | Bitwise ANDs register with 0x00FF
	14:"." : LOAD {reg}, {imm4}  | Loads 4 bit value into register
	15:"/" : EXIT                | Exits program
Registers:
	0:"<" : R0/AX 16 bit General purpose
	1:">" : R1/BX 16 bit General purpose
	2:"~" : R2/CX 16 bit General purpose
	3:"^" : R3/DX 16 bit General purpose
	4:"?" : R4    16 bit General purpose
	5:"@" : R5    16 bit General purpose
	6:"=" : R6/JO 16 bit JUMP offset
	7:"|" : R7/VO 16 bit LOAD/STORE offset
RAM is same place as code